<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Treamy&#39;s website</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2018-03-23T08:15:06.901Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>Treamy</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Radial basis function kernel</title>
    <link href="http://yoursite.com/2018/03/18/Radial-basis-function-kernel/"/>
    <id>http://yoursite.com/2018/03/18/Radial-basis-function-kernel/</id>
    <published>2018-03-18T10:54:27.000Z</published>
    <updated>2018-03-23T08:15:06.901Z</updated>
    
    <content type="html"><![CDATA[<h2 id="高斯径向基函数"><a href="#高斯径向基函数" class="headerlink" title="高斯径向基函数"></a>高斯径向基函数</h2><h4 id="简介："><a href="#简介：" class="headerlink" title="简介："></a>简介：</h4><p>在机器学习中，（高斯）径向基函数核（英语：Radial basis function kernel），或称为RBF核，是一种常用的核函数。它是支持向量机分类中最为常用的核函数。—— <a href="https://zh.wikipedia.org/wiki/%E5%BE%84%E5%90%91%E5%9F%BA%E5%87%BD%E6%95%B0%E6%A0%B8" target="_blank" rel="noopener">维基百科</a></p><h2 id="高斯径向基函数-1"><a href="#高斯径向基函数-1" class="headerlink" title="高斯径向基函数"></a>高斯径向基函数</h2><h4 id="高斯径向基函数公式如下："><a href="#高斯径向基函数公式如下：" class="headerlink" title="高斯径向基函数公式如下："></a>高斯径向基函数公式如下：</h4><p>$$K(x_1,x_2)=\exp{(-\frac{\parallel x_1-x_2 \parallel^2 }{2\sigma^2})}, \sigma&gt;0$$</p><h4 id="那么它有什么几何意义呢"><a href="#那么它有什么几何意义呢" class="headerlink" title="那么它有什么几何意义呢?"></a>那么它有什么几何意义呢?</h4><p>先看看x经过映射以后，在高维空间里这个点到原点的距离公式：<br> $$ \parallel x_i-0\parallel^2 = \parallel x_i \parallel^2=\left \langle  \Phi (x_i), \Phi (x_i)\right \rangle=K(x_i,x_i)=1$$<br>这表明样本x映射到高维空间后，在高维空间中的点$\Phi (x_i)$到高维空间中原点的距离为1，也即$\Phi (x_i)$存在于一个<strong>超球面</strong>上。</p><h4 id="为什么核函数能映射到高维空间呢？"><a href="#为什么核函数能映射到高维空间呢？" class="headerlink" title="为什么核函数能映射到高维空间呢？"></a>为什么核函数能映射到高维空间呢？</h4><p>先考虑普通的多项式核函数：$K(x,y)=(x^T\cdot y+m)^p$,其中$x,y\in \mathbb{R}^n$，多项式参数$p,m\in \mathbb{R}$<br>考虑$x=(x_1,x_2),y=(y_1,y_2),m=0,p=2$，即$K(x,y)=(x^T\cdot y)^2=x_1^2y_1^2+2x_1x_2y_1y_2+x_2^2y_2^2$<br>现在回到之前的映射$k(x,y)=\left \langle \Phi(x),\Phi(y)\right \rangle$，并取$\Phi(x)=(x_1^2,\sqrt{2}x_1x_2,x_2^2)$<br>则有$k(x,y)=\left \langle \Phi(x),\Phi(y)\right \rangle=x_1^2y_1^2+2x_1x_2y_1y_2+x_2^2y_2^2=(x^T\cdot y)^2=K(x,y)$<br>这就是前面的$K(x,y)$，因此，该核函数就将2维映射到了3维空间。</p><h4 id="径向基核又为什么能够映射到无限维空间呢？"><a href="#径向基核又为什么能够映射到无限维空间呢？" class="headerlink" title="径向基核又为什么能够映射到无限维空间呢？"></a>径向基核又为什么能够映射到无限维空间呢？</h4><p>看完了普通多项式核函数由2维向3维的映射，再来看看高斯径向基函数会把2维平面上一点映射到多少维。<br>$$\begin{eqnarray}<br>K(x,y) &amp; = &amp; \exp(| x_1-x_2 |^2 ) \<br>&amp; = &amp; \exp(-(x_1-y_1)^2-(x_2-y_2)^2) \<br>&amp; = &amp; \exp(-x_1^2+2x_1y_1-y_1^2-x_2^2+2x_2y_2-y_2^2) \<br>&amp; = &amp; \exp(-|x|^2)\exp(-|y|^2)\exp(2x^Ty)\<br>\end{eqnarray}$$<br>将最后一项泰勒展开你就会恍然大悟：<br>$$K(x,y)=\exp(-|x|^2)\exp(-|y|^2)\sum_{n=0}^{\infty}\frac{(2x^Ty)^n}{n!}$$</p><p>再具体一点：<br>高斯核是这样定义的：$K(x_1,x_2)=\exp{(-\frac{\parallel x_1-x_2 \parallel^2 }{2\sigma^2})}, \sigma&gt;0$<br>尽管我不会解释它（但相信我）高斯核可以简单修正为这个样子：$K(x_1,x_2)=\exp(-\frac{x_1\cdot x_2}{\sigma^2}),\sigma&gt;0$，这里$x_1\cdot x_2$可解释为内积。<br>再用泰勒展开就会得到$K(x_1,x_2)=\sum_{n=0}^{\infty}\frac{(x_1\cdot x_2)^n}{\sigma^nn!}$<br>求和号里面的元素是不是看起来很熟悉呢？<br>没错，这就是一个n次多项式核。因为每一个多项式核都将一个向量投影到更高维的空间中，因此高斯核是那些$degree\geq0$的<strong>多项式核</strong>的<strong>组合</strong>，所以我们说高斯核是投影到无穷维空间中。</p><ul><li>参考<br>Quora上的问题：<a href="https://www.quora.com/Machine-Learning/Why-does-the-RBF-radial-basis-function-kernel-map-into-infinite-dimensional-space-mentioned-many-times-in-machine-learning-lectures" target="_blank" rel="noopener">https://www.quora.com/Machine-Learning/Why-does-the-RBF-radial-basis-function-kernel-map-into-infinite-dimensional-space-mentioned-many-times-in-machine-learning-lectures</a></li></ul><h4 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h4><p>初学者使用markdown与LaTeX的语法真不适应啊，就写到这里吧，写篇博客太累了orz饭都没吃，关于RBF神经网络的话，以后用到再来讲吧，累死我惹。<br>如有疑问，欢迎咨询，联系方式见“关于”页面。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;高斯径向基函数&quot;&gt;&lt;a href=&quot;#高斯径向基函数&quot; class=&quot;headerlink&quot; title=&quot;高斯径向基函数&quot;&gt;&lt;/a&gt;高斯径向基函数&lt;/h2&gt;&lt;h4 id=&quot;简介：&quot;&gt;&lt;a href=&quot;#简介：&quot; class=&quot;headerlink&quot; title=
      
    
    </summary>
    
      <category term="math" scheme="http://yoursite.com/categories/math/"/>
    
      <category term="theory" scheme="http://yoursite.com/categories/math/theory/"/>
    
    
      <category term="machine_leanring" scheme="http://yoursite.com/tags/machine-leanring/"/>
    
      <category term="math" scheme="http://yoursite.com/tags/math/"/>
    
  </entry>
  
  <entry>
    <title>python 的闭包、装饰器</title>
    <link href="http://yoursite.com/2018/03/17/python-%E7%9A%84%E9%97%AD%E5%8C%85%E3%80%81%E8%A3%85%E9%A5%B0%E5%99%A8/"/>
    <id>http://yoursite.com/2018/03/17/python-的闭包、装饰器/</id>
    <published>2018-03-17T09:33:14.000Z</published>
    <updated>2018-03-17T10:10:55.183Z</updated>
    
    <content type="html"><![CDATA[<h1 id="一、闭包（Closure）"><a href="#一、闭包（Closure）" class="headerlink" title="一、闭包（Closure）"></a>一、闭包（Closure）</h1><h2 id="什么是闭包？"><a href="#什么是闭包？" class="headerlink" title="什么是闭包？"></a>什么是闭包？</h2><blockquote><p>在计算机科学中，闭包（英语：Closure），又称词法闭包（Lexical Closure）或函数闭包（function closures），是引用了自由变量的函数。这个被引用的自由变量将和这个函数一同存在，即使已经离开了创造它的环境也不例外。所以，有另一种说法认为闭包是由函数和与其相关的引用环境组合而成的实体。闭包在运行时可以有多个实例，不同的引用环境和相同的函数组合可以产生不同的实例。—— <a href="https://zh.wikipedia.org/wiki/闭包_(计算机科学" target="_blank" rel="noopener">维基百科</a>)</p></blockquote><p>这里我给个简单的解释：一个<strong>闭包</strong>就是你调用了一个<em>函数A</em>，这个<em>函数A</em>返回了一个<em>函数B</em>给你。这个<strong>返回的函数B</strong>就叫做闭包。你在<strong>调用函数A</strong>的时候<strong>传递的参数</strong>就是<strong>自由变量</strong>。</p><h2 id="举个例子："><a href="#举个例子：" class="headerlink" title="举个例子："></a>举个例子：</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">func</span><span class="params">(name)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">inner_func</span><span class="params">(age)</span>:</span></span><br><span class="line">        <span class="keyword">print</span> <span class="string">'name:'</span>, name, <span class="string">'age:'</span>, age</span><br><span class="line">    <span class="keyword">return</span> inner_func</span><br><span class="line"></span><br><span class="line">bb = func(<span class="string">'matrix'</span>)</span><br><span class="line">bb(<span class="number">26</span>)  <span class="comment"># &gt;&gt;&gt; name: matrix age: 26</span></span><br></pre></td></tr></table></figure><p>这里面调用func的时候就产生了一个闭包– <em>inner_func</em>,并且该闭包持有自由变量– <em>name</em>，因此这也意味着，当函数func的生命周期结束之后，<strong>name这个变量依然存在</strong>，因为它被闭包引用了，所以不会被回收。</p><ul><li>也有人说这种内部函数inner_func可以使用外部函数的变量name的行为就叫闭包。</li></ul><h1 id="二、装饰器（Decorator）"><a href="#二、装饰器（Decorator）" class="headerlink" title="二、装饰器（Decorator）"></a>二、装饰器（Decorator）</h1><h2 id="什么是装饰器？"><a href="#什么是装饰器？" class="headerlink" title="什么是装饰器？"></a>什么是装饰器？</h2><blockquote><p>“装饰器的功能是将被装饰的函数当作参数传递给与装饰器对应的函数（名称相同的函数），并返回包装后的被装饰的函数”</p></blockquote><p>听起来有点绕，没关系，直接看示意图,其中a为 与<em>装饰器@a</em>对应的函数，<em>b</em>为装饰器修饰的函数，<em>装饰器@a</em>的作用是：<br><img src="/images/decorator.png" alt="image"><br><strong>简而言之：@a 就是将 b 传递给 a()，并返回新的 b = a(b)</strong></p><h2 id="举个例子"><a href="#举个例子" class="headerlink" title="举个例子"></a>举个例子</h2><ol><li><p>先导入包：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> functools <span class="keyword">import</span> reduce</span><br><span class="line"><span class="keyword">import</span> math</span><br><span class="line"><span class="keyword">import</span> logging</span><br><span class="line">logging.basicConfig(level=logging.INFO)</span><br></pre></td></tr></table></figure></li><li><p>定义一个检查参数的装饰器：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">checkParams</span><span class="params">(fn)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">wrapper</span><span class="params">(*numbers)</span>:</span></span><br><span class="line">        temp = map(<span class="keyword">lambda</span> x:isinstance(x,(int,)),numbers) <span class="comment"># 检查参数是否都为整型</span></span><br><span class="line">        <span class="keyword">if</span> reduce(<span class="keyword">lambda</span> x,y: x <span class="keyword">and</span> y, temp): <span class="comment"># 若都为整型</span></span><br><span class="line">            <span class="keyword">return</span> fn(*numbers)             <span class="comment"># 则调用fn(*numbers)返回计算结果</span></span><br><span class="line">        <span class="comment">#否则通过logging记录错误信息，并友好退出</span></span><br><span class="line">        logging.warning(<span class="string">"variable numbers cannot be added"</span>)</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    <span class="keyword">return</span> wrapper     <span class="comment">#fn引用gcd，被封存在闭包的执行环境中返回</span></span><br></pre></td></tr></table></figure></li><li><p>然后定义求最大公约数的函数（能求多个的最大公约数）：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">gcd</span><span class="params">(*numbers)</span>:</span></span><br><span class="line">    <span class="string">"""return the greatest common divisor of the given integers."""</span></span><br><span class="line">    <span class="keyword">return</span> reduce(math.gcd, numbers)</span><br></pre></td></tr></table></figure></li><li><p>调用</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt;gcd = checkParams(gcd)</span><br><span class="line">&gt;&gt;&gt;gcd(3, <span class="string">'hello'</span>)</span><br><span class="line"><span class="comment"># 输出 WARNING:root: variable numbers cannot be added</span></span><br></pre></td></tr></table></figure></li></ol><p>注意checkParams函数：</p><blockquote><ul><li>首先看参数fn，当我们调用checkParams(gcd)的时候，它将成为函数对象gcd的一个本地(Local)引用；</li><li>在checkParams内部，我们定义了一个wrapper函数，添加了参数类型检查的功能，然后调用了fn(*numbers)，根据LEGB法则，解释器将搜索几个作用域，并最终在(Enclosing层) checkParams函数的本地作用域中找到fn；</li><li>注意最后的return wrapper，这将创建一个闭包，fn变量(gcd函数对象的一个引用)将会封存在闭包的执行环境中，不会随着checkParams的返回而被回收；</li></ul></blockquote><p>当调用gcd = checkParams(gcd)时，gcd指向了新的wrapper对象，它添加了参数检查和记录日志的功能，同时又能够通过封存的fn，继续调用原始的gcd进行最大公约数运算。</p><p>因此调用gcd(3, ‘hello’)将不会返回计算结果，而是打印出日志：root: variable numbers cannot be added。</p><p>有人觉得add = checkParams(add)这样的写法未免太过麻烦，于是python提供了一种更优雅的写法，被称为<strong>语法糖</strong>：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@checkParams</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">lcm</span><span class="params">(*numbers)</span>:</span></span><br><span class="line">    <span class="string">"""return lowest common multiple."""</span></span><br><span class="line">    f = <span class="keyword">lambda</span> a,b:int((a*b)/gcd(a,b))</span><br><span class="line">    <span class="keyword">return</span> reduce(f, numbers)</span><br></pre></td></tr></table></figure></p><p>其实这只是一种写法上的优化，解释器仍然会将它转化为gcd = checkParams(gcd)来执行。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;一、闭包（Closure）&quot;&gt;&lt;a href=&quot;#一、闭包（Closure）&quot; class=&quot;headerlink&quot; title=&quot;一、闭包（Closure）&quot;&gt;&lt;/a&gt;一、闭包（Closure）&lt;/h1&gt;&lt;h2 id=&quot;什么是闭包？&quot;&gt;&lt;a href=&quot;#什么是
      
    
    </summary>
    
      <category term="math" scheme="http://yoursite.com/categories/math/"/>
    
      <category term="python" scheme="http://yoursite.com/categories/math/python/"/>
    
    
      <category term="python" scheme="http://yoursite.com/tags/python/"/>
    
      <category term="fun math" scheme="http://yoursite.com/tags/fun-math/"/>
    
  </entry>
  
  <entry>
    <title>hexo常用命令笔记</title>
    <link href="http://yoursite.com/2018/03/13/hexo%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4%E7%AC%94%E8%AE%B0/"/>
    <id>http://yoursite.com/2018/03/13/hexo常用命令笔记/</id>
    <published>2018-03-13T14:59:57.000Z</published>
    <updated>2018-03-13T15:10:19.665Z</updated>
    
    <content type="html"><![CDATA[<h1 id="hexo"><a href="#hexo" class="headerlink" title="hexo"></a>hexo</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo -g <span class="comment">#安装</span></span><br><span class="line">npm update hexo -g <span class="comment">#升级</span></span><br><span class="line">hexo init <span class="comment">#初始化</span></span><br></pre></td></tr></table></figure><h1 id="简写"><a href="#简写" class="headerlink" title="简写"></a>简写</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">hexo n <span class="string">"我的博客"</span> == hexo new <span class="string">"我的博客"</span> <span class="comment">#新建文章</span></span><br><span class="line">hexo p == hexo publish</span><br><span class="line">hexo g == hexo generate<span class="comment">#生成</span></span><br><span class="line">hexo s == hexo server <span class="comment">#启动服务预览</span></span><br><span class="line">hexo d == hexo deploy<span class="comment">#部署</span></span><br></pre></td></tr></table></figure><h1 id="服务器"><a href="#服务器" class="headerlink" title="服务器"></a>服务器</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">hexo server <span class="comment">#Hexo 会监视文件变动并自动更新，您无须重启服务器。</span></span><br><span class="line">hexo server -s <span class="comment">#静态模式</span></span><br><span class="line">hexo server -p 5000 <span class="comment">#更改端口</span></span><br><span class="line">hexo server -i 192.168.1.1 <span class="comment">#自定义 IP</span></span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">hexo clean #清除缓存 网页正常情况下可以忽略此条命令</span><br><span class="line">hexo g #生成静态网页</span><br><span class="line">hexo d #开始部署</span><br></pre></td></tr></table></figure><h1 id="监视文件变动"><a href="#监视文件变动" class="headerlink" title="监视文件变动"></a>监视文件变动</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">hexo generate #使用 Hexo 生成静态文件快速而且简单</span><br><span class="line">hexo generate --watch #监视文件变动</span><br></pre></td></tr></table></figure><h1 id="完成后部署"><a href="#完成后部署" class="headerlink" title="完成后部署"></a>完成后部署</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"># 以下两个命令的作用是相同的</span><br><span class="line">hexo generate --deploy</span><br><span class="line">hexo deploy --generate</span><br></pre></td></tr></table></figure><h2 id="简写-1"><a href="#简写-1" class="headerlink" title="简写"></a>简写</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">hexo deploy -g</span><br><span class="line">hexo server -g</span><br></pre></td></tr></table></figure><h1 id="草稿"><a href="#草稿" class="headerlink" title="草稿"></a>草稿</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo publish [layout] &lt;title&gt;</span><br></pre></td></tr></table></figure><h1 id="模版"><a href="#模版" class="headerlink" title="模版"></a>模版</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">hexo new &quot;postName&quot; #新建文章</span><br><span class="line">hexo new page &quot;pageName&quot; #新建页面</span><br><span class="line">hexo generate #生成静态页面至public目录</span><br><span class="line">hexo server #开启预览访问端口（默认端口4000，&apos;ctrl + c&apos;关闭server）</span><br><span class="line">hexo deploy #将.deploy目录部署到GitHub</span><br></pre></td></tr></table></figure><p>如：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">hexo new [layout] &lt;title&gt;</span><br><span class="line">hexo new photo &quot;My Gallery&quot;</span><br><span class="line">hexo new &quot;Hello World&quot; --lang tw</span><br></pre></td></tr></table></figure></p><table><thead><tr><th>变量</th><th style="text-align:center">描述</th></tr></thead><tbody><tr><td>layout</td><td style="text-align:center">布局</td></tr><tr><td>title</td><td style="text-align:center">标题</td></tr><tr><td>date</td><td style="text-align:center">文件建立日期</td></tr></tbody></table><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">title: 使用Hexo搭建个人博客</span><br><span class="line">layout: post</span><br><span class="line">date: 2014-03-03 19:07:43</span><br><span class="line">comments: true</span><br><span class="line">categories: Blog</span><br><span class="line">tags: [Hexo]</span><br><span class="line">keywords: Hexo, Blog</span><br><span class="line">description: 生命在于折腾，又把博客折腾到Hexo了。给Hexo点赞。</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;hexo&quot;&gt;&lt;a href=&quot;#hexo&quot; class=&quot;headerlink&quot; title=&quot;hexo&quot;&gt;&lt;/a&gt;hexo&lt;/h1&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre
      
    
    </summary>
    
      <category term="hexo" scheme="http://yoursite.com/categories/hexo/"/>
    
      <category term="Instructions" scheme="http://yoursite.com/categories/hexo/Instructions/"/>
    
    
      <category term="hexo" scheme="http://yoursite.com/tags/hexo/"/>
    
  </entry>
  
  <entry>
    <title>my_knn</title>
    <link href="http://yoursite.com/2018/03/13/my-knn/"/>
    <id>http://yoursite.com/2018/03/13/my-knn/</id>
    <published>2018-03-13T13:58:30.000Z</published>
    <updated>2018-03-23T08:14:41.549Z</updated>
    
    <content type="html"><![CDATA[<h1 id="关于"><a href="#关于" class="headerlink" title="关于"></a>关于</h1><p>在一个月前，需要用<code>1nn</code>做二分类的测试的时候，开始因为用<code>sklearn</code>训练数据时用错了数据集，百思不得其解，于是自己写了个<code>knn</code>来训练，当时写好后，才真正把原理给弄懂了orz，原来是数据集训练时用错了。。。改正后对比了一下自己的<code>knn</code>和<code>sklearn</code>的<code>knn</code>的准确率都差不多（也就是说测试通过啦），就上传到了我的GitHub。</p><p>当时我虽然有个用腾讯云搭建的博客，但基本上都没在上面写过了orz，本博客当时还没有问世，正好基于GitHub的服务器最近搭了这个博客，空空的也不好，最近老师第一讲就讲knn，那就把之前的代码贴上吧。</p><h1 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h1><p>对于一个输入的测试数据，计算该样本点到训练数据各样本点的距离，然后对所有距离由小到大排列，取前k个数据；统计该k个数据中对应的标签出现次数最多的标签，则该测试样本就被标记为该标签。</p><h1 id="算法"><a href="#算法" class="headerlink" title="算法"></a>算法</h1><ul><li>输入: 训练数据集：$T={(X_1,y_1),(X_2,y_2),…,(X_N,y_N)}$, 其中$X_i={x_i^1,x_i^2,…,x_i^n}$,有n个特征，N个样本点;</li><li>输入：最近邻个数k，及要预测的样本点$X_0={x_0^1,,x_0^2,…,x_0^n}$;</li><li>计算：样本点X_0到训练数据集T中各样本点的距离（一般为欧氏距离）;</li><li>排序：将以上算出的距离由小到大排序，并选出前k个距离数据;</li><li>统计：统计前k个距离数据中各个标签对应的个数，选出个数最多的那个标签，即为该样本点预测的结果。</li></ul><h1 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">from</span> sklearn.datasets <span class="keyword">import</span> load_iris</span><br><span class="line"><span class="keyword">from</span> sklearn.model_selection <span class="keyword">import</span> train_test_split</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">my_knn</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="string">"""docstring for my_knn"""</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, k)</span>:</span></span><br><span class="line">        super(my_knn, self).__init__()</span><br><span class="line">        self.k = k</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">train</span><span class="params">(self, X_train, y_train)</span>:</span></span><br><span class="line">        self.X_train, self.y_train = np.array(X_train), np.array(y_train)</span><br><span class="line">        <span class="keyword">if</span> len(self.X_train) != len(self.y_train):</span><br><span class="line">            <span class="keyword">raise</span> ValueError(<span class="string">"X_test,y_test or y_train was not equail!"</span></span><br><span class="line">                             <span class="string">"The length of X_test,y_test is %s"</span></span><br><span class="line">                             <span class="string">"But the length of y_train is %s"</span> % (len(self.X_train), len(self.y_train)))</span><br><span class="line">        <span class="keyword">return</span> self</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">predict_one</span><span class="params">(self, X)</span>:</span></span><br><span class="line">        dist2xtrain = np.sum((X - self.X_train)**<span class="number">2</span>, axis=<span class="number">1</span>)**<span class="number">0.5</span></span><br><span class="line">        index = dist2xtrain.argsort() <span class="comment"># 从小到大（近到远）</span></span><br><span class="line">        label_count = &#123;&#125;</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(self.k):</span><br><span class="line">            label = self.y_train[index[i]]</span><br><span class="line">            label_count[label] = label_count.get(label, <span class="number">0</span>) + <span class="number">1</span></span><br><span class="line">        <span class="comment"># 将label_count的值从大到小排列label_count的键</span></span><br><span class="line">        y_predict = sorted(label_count, key=<span class="keyword">lambda</span> x: label_count[x], reverse=<span class="keyword">True</span>)[<span class="number">0</span>]</span><br><span class="line">        <span class="keyword">return</span> y_predict</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">predict_all</span><span class="params">(self, X)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> np.array(list(map(self.predict_one, X)))</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">calc_accuracy</span><span class="params">(self, X, y)</span>:</span></span><br><span class="line">        predict = self.predict_all(X)</span><br><span class="line">        total = X.shape[<span class="number">0</span>]</span><br><span class="line">        right = sum(predict == y)</span><br><span class="line">        accuracy = right/total</span><br><span class="line">        <span class="keyword">return</span> accuracy</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</span><br><span class="line">    data_set = load_iris()</span><br><span class="line">    datas = data_set[<span class="string">"data"</span>]</span><br><span class="line">    labels = data_set[<span class="string">'target'</span>]</span><br><span class="line">    X_train, X_test, y_train, y_test = train_test_split(datas, labels, test_size=<span class="number">0.4</span>, random_state=<span class="number">0</span>)</span><br><span class="line">    knn = my_knn(<span class="number">1</span>)</span><br><span class="line">    knn = knn.train(X_train,y_train)</span><br><span class="line">    accuracy = knn.calc_accuracy(X_test,y_test)</span><br><span class="line">    print(<span class="string">"%.3f%%"</span> % (accuracy * <span class="number">100</span>))</span><br><span class="line"></span><br><span class="line">    <span class="keyword">from</span> sklearn.neighbors <span class="keyword">import</span> KNeighborsClassifier</span><br><span class="line">    neigh = KNeighborsClassifier(n_neighbors=<span class="number">1</span>)</span><br><span class="line">    neigh.fit(X_train, y_train)</span><br><span class="line">    print(neigh.score(X_train,y_train))</span><br><span class="line">    print(neigh.score(X_test, y_test))</span><br></pre></td></tr></table></figure><h1 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h1><p>关于对knn的kd树加速这部分还需要日后的后续学习，这里就先不说啦（其实是我也不会23333）。<br>由于我对markdown语法不太熟悉，写起文章来的有点别扭还望理解（逃。</p><h1 id="写给自己"><a href="#写给自己" class="headerlink" title="写给自己"></a>写给自己</h1><p>  还是要多花点时间学习啊！一个多月没学习就忘得差不多了orz,还好看一下就能回想起来。多练习吧！</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;关于&quot;&gt;&lt;a href=&quot;#关于&quot; class=&quot;headerlink&quot; title=&quot;关于&quot;&gt;&lt;/a&gt;关于&lt;/h1&gt;&lt;p&gt;在一个月前，需要用&lt;code&gt;1nn&lt;/code&gt;做二分类的测试的时候，开始因为用&lt;code&gt;sklearn&lt;/code&gt;训练数据时用错了数
      
    
    </summary>
    
      <category term="machine_leanring" scheme="http://yoursite.com/categories/machine-leanring/"/>
    
      <category term="code" scheme="http://yoursite.com/categories/machine-leanring/code/"/>
    
    
      <category term="machine_leanring" scheme="http://yoursite.com/tags/machine-leanring/"/>
    
      <category term="python" scheme="http://yoursite.com/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>my_bayes</title>
    <link href="http://yoursite.com/2018/03/13/my-bayes/"/>
    <id>http://yoursite.com/2018/03/13/my-bayes/</id>
    <published>2018-03-13T13:09:38.000Z</published>
    <updated>2018-03-23T08:14:51.626Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>本周一晚上老师讲到了<code>naive bayes（朴素贝叶斯分类器）</code>，于是自己用python来实现了一下。现在这个脚本对于比较大的数据可能会计算的比较慢，还需要以后慢慢再研究一下里面的加速。</p><p>本程序主要利用了pandas里dataframe的groupby分组函数，大大的方便了对数据的统计。对于条件概率，有不同的标签，不同的特征和特征里的不同数据，我们采用了<code>dict</code>数据结构，第一层key为标签，value是一个新的dict；第二层（前面那个新的dict）的key为特征，value是一个Series或者字典；第三层的key/index为特征的取值，value为频数/概率。、、（虽然看起来比较拗口，但我感觉这样能够比较清晰的分清了各个条件概率了，如果你有更好的方法，欢迎留言给我，谢谢。）</p><h1 id="算法"><a href="#算法" class="headerlink" title="算法"></a>算法</h1><blockquote><ul><li>输入：训练数据集及其标签集，要预测的数据集</li><li>统计各标签出现的频数，并拉普拉斯平滑，计算先验概率</li><li>统计在各标签下各个特征的频数，并拉普拉斯平滑，计算条件概率</li><li>查找要预测数据集各特征在不同标签下的条件概率和先验概率相乘得到（半）后验概率</li><li>对半后验概率进行从大到小排序，选出最大值对应的标签，即为预测结果</li><li>实例化测试<br>ps：这里半后验概率为我自己的定义：$P(Y_j) *\prod_{i=1}^N P(A_i|Y_j) ; i:1\to n_{feature}; j:1\to n_{label}$</li></ul></blockquote><h1 id="解释"><a href="#解释" class="headerlink" title="解释"></a>解释</h1><p>本程序主要分为一下部分：</p><blockquote><ul><li>定义一个bayes分类器（类）</li><li>计算先验概率</li><li>计算所有条件概率</li><li>进行调用训练</li><li>对测试数据进行预测</li><li>实例化测试</li></ul></blockquote><p>以上各对应之下的各个函数：（废话不多说，直接上代码）</p><h1 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">my_naive_bayes</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, df)</span>:</span></span><br><span class="line">        super(my_naive_bayes, self).__init__()</span><br><span class="line">        self.df = df</span><br><span class="line">        self.X_train = df.iloc[:,:<span class="number">-1</span>]</span><br><span class="line">        self.y_train = df.iloc[:,<span class="number">-1</span>]</span><br><span class="line">        self.label_set = set(self.y_train)</span><br><span class="line">        self.features = df.columns[:<span class="number">-1</span>]</span><br><span class="line">        self.label_name = df.columns[<span class="number">-1</span>]</span><br><span class="line">        self.feature_dict = &#123;&#125;</span><br><span class="line">        self.n_sample = len(df)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_prior_p</span><span class="params">(self, g)</span>:</span></span><br><span class="line">        n = len(g)</span><br><span class="line">        prior_p = &#123;&#125;</span><br><span class="line">        <span class="keyword">for</span> label <span class="keyword">in</span> self.label_set:</span><br><span class="line">            prior_p[label] = g.size()[label] / self.n_sample</span><br><span class="line">        <span class="keyword">return</span> prior_p</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_cond_p</span><span class="params">(self, g)</span>:</span></span><br><span class="line">        cond_p = &#123;&#125;</span><br><span class="line">        <span class="keyword">for</span> label, group <span class="keyword">in</span> g:</span><br><span class="line">            cond_p[label] = &#123;&#125;</span><br><span class="line">            <span class="keyword">for</span> feature <span class="keyword">in</span> self.features:</span><br><span class="line">                counts = group[feature].value_counts()</span><br><span class="line">                cond_p[label][feature] = counts / sum(counts)</span><br><span class="line">        <span class="keyword">return</span> cond_p</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">train</span><span class="params">(self, )</span>:</span></span><br><span class="line">        <span class="keyword">for</span> feature <span class="keyword">in</span> self.features:</span><br><span class="line">            self.feature_dict[feature] = set(self.df[feature])</span><br><span class="line">        g = self.df.groupby(self.label_name)</span><br><span class="line"></span><br><span class="line">        self.prior_p = self.get_prior_p(g)</span><br><span class="line">        self.cond_p = self.get_cond_p(g)</span><br><span class="line">        <span class="keyword">return</span> self</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">predict_one</span><span class="params">(self, test_X)</span>:</span></span><br><span class="line">        semi_post_p = &#123;&#125;</span><br><span class="line">        <span class="keyword">for</span> label <span class="keyword">in</span> self.label_set:</span><br><span class="line">            temp = <span class="number">1</span></span><br><span class="line">            <span class="keyword">for</span> feature <span class="keyword">in</span> self.features:</span><br><span class="line">                temp = temp * self.cond_p[label][feature][test_X[feature]]</span><br><span class="line">            semi_post_p[label] = self.prior_p[label] * temp</span><br><span class="line">        <span class="keyword">return</span> max(semi_post_p, key=semi_post_p.get)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">df = pd.read_excel(<span class="string">"bayes_data.xlsx"</span>,index_col=<span class="string">"index"</span>)</span><br><span class="line"><span class="comment"># n = len(df)</span></span><br><span class="line"><span class="comment"># train_n = int(n*0.6)</span></span><br><span class="line"><span class="comment"># train_df = df[:train_n]</span></span><br><span class="line"><span class="comment"># test_df = df[train_n:]</span></span><br><span class="line">bayes = my_naive_bayes(df)</span><br><span class="line">bayes = bayes.train()</span><br><span class="line">test_x = df.loc[<span class="number">6</span>]</span><br><span class="line">label = bayes.predict_one(test_x)</span><br><span class="line">print(label)</span><br></pre></td></tr></table></figure><h1 id="最后，好好学习，天天向上！"><a href="#最后，好好学习，天天向上！" class="headerlink" title="最后，好好学习，天天向上！"></a>最后，好好学习，天天向上！</h1>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;本周一晚上老师讲到了&lt;code&gt;naive bayes（朴素贝叶斯分类器）&lt;/code&gt;，于是自己用python来实现了一下。现在这个脚本对
      
    
    </summary>
    
      <category term="machine_leanring" scheme="http://yoursite.com/categories/machine-leanring/"/>
    
      <category term="code" scheme="http://yoursite.com/categories/machine-leanring/code/"/>
    
    
      <category term="machine_leanring" scheme="http://yoursite.com/tags/machine-leanring/"/>
    
      <category term="python" scheme="http://yoursite.com/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>18_03_07</title>
    <link href="http://yoursite.com/2018/03/07/18-03-07/"/>
    <id>http://yoursite.com/2018/03/07/18-03-07/</id>
    <published>2018-03-07T08:27:50.000Z</published>
    <updated>2018-03-07T08:43:35.364Z</updated>
    
    <content type="html"><![CDATA[<p>今天是开学第三天，各种事情莫名烦躁。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;今天是开学第三天，各种事情莫名烦躁。&lt;/p&gt;

      
    
    </summary>
    
      <category term="diary" scheme="http://yoursite.com/categories/diary/"/>
    
    
      <category term="diary" scheme="http://yoursite.com/tags/diary/"/>
    
      <category term="life-style" scheme="http://yoursite.com/tags/life-style/"/>
    
  </entry>
  
  <entry>
    <title>SVM explained-well</title>
    <link href="http://yoursite.com/2018/03/02/SVM-explained-well/"/>
    <id>http://yoursite.com/2018/03/02/SVM-explained-well/</id>
    <published>2018-03-02T09:40:40.000Z</published>
    <updated>2018-03-02T09:52:39.291Z</updated>
    
    <content type="html"><![CDATA[<p>Support vector machines (SVM)</p><p>User <a href="http://www.reddit.com/user/copperking" target="_blank" rel="noopener">copperking</a> stepped up to the plate:</p><p>“We have 2 colors of balls on the table that we want to separate.</p><p><img src="/images/SVM/svm1-300x225.png" alt="image"></p><p>We get a stick and put it on the table, this works pretty well right?</p><p><img src="/images/SVM/svm2-300x225.png" alt="image"></p><p>Some villain comes and places more balls on the table, it kind of works but one of the balls is on the wrong side and there is probably a better place to put the stick now.</p><p><img src="/images/SVM/svm3-300x225.png" alt="image"></p><p>SVMs try to put the stick in the best possible place by having as big a gap on either side of the stick as possible.</p><p><img src="/images/SVM/svm4-300x225.png" alt="image"></p><p>Now when the villain returns the stick is still in a pretty good spot.</p><p><img src="/images/SVM/svm5-300x225.png" alt="image"></p><p>There is another trick in the SVM toolbox that is even more important. Say the villain has seen how good you are with a stick so he gives you a new challenge.</p><p><img src="/images/SVM/svm6-300x225.png" alt="image">svm7-300x167.png</p><p>There’s no stick in the world that will let you split those balls well, so what do you do? You flip the table of course! Throwing the balls into the air. Then, with your pro ninja skills, you grab a sheet of paper and slip it between the balls.</p><p><img src="/images/SVM/svm7-300x167.png" alt="image"></p><p>Now, looking at the balls from where the villain is standing, they balls will look split by some curvy line.</p><p><img src="/images/SVM/svm8-300x225.png" alt="image"></p><p>Boring adults the call balls data, the stick a classifier, the biggest gap trick optimization, call flipping the table kernelling and the piece of paper a hyperplane.”</p><p>I think the last step is the most beautiful no mater in mathematic or machine learning! Hope it will help you.</p><p>source: <a href="http://bytesizebio.net/2014/02/05/support-vector-machines-explained-well/" target="_blank" rel="noopener">http://bytesizebio.net/2014/02/05/support-vector-machines-explained-well/</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Support vector machines (SVM)&lt;/p&gt;
&lt;p&gt;User &lt;a href=&quot;http://www.reddit.com/user/copperking&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;copperking&lt;/a&gt; s
      
    
    </summary>
    
      <category term="theory" scheme="http://yoursite.com/categories/theory/"/>
    
    
      <category term="machine_leanring" scheme="http://yoursite.com/tags/machine-leanring/"/>
    
      <category term="fun math" scheme="http://yoursite.com/tags/fun-math/"/>
    
  </entry>
  
  <entry>
    <title>new-post</title>
    <link href="http://yoursite.com/2018/02/27/new-post/"/>
    <id>http://yoursite.com/2018/02/27/new-post/</id>
    <published>2018-02-27T06:29:07.000Z</published>
    <updated>2018-03-13T14:58:29.904Z</updated>
    
    <content type="html"><![CDATA[<h1 id="this-is-a-test-blog"><a href="#this-is-a-test-blog" class="headerlink" title="this is a test blog."></a>this is a test blog.</h1><p>welcome to treamy’s world.</p><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><h3 id="add-some-code"><a href="#add-some-code" class="headerlink" title="add some code"></a>add some code</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(<span class="string">"My New Post"</span>)</span><br></pre></td></tr></table></figure><h3 id="标签页面"><a href="#标签页面" class="headerlink" title="标签页面"></a>标签页面</h3><p>1&gt;运行以下命令<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new page <span class="string">"tags"</span></span><br></pre></td></tr></table></figure></p><p>同时，在/source目录下会生成一个tags文件夹，里面包含一个index.md文件</p><h3 id="推送到服务器上"><a href="#推送到服务器上" class="headerlink" title="推送到服务器上"></a>推送到服务器上</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo g -d</span><br></pre></td></tr></table></figure><p>先generate一下生成静态页面，再deploy部署到服务器。<br>好像<code>hexo d -g</code>也可以。。一次记错了写成这个也行。。我也不知道为啥在一个网页上看到说他们左右是相同的，还是用前面那个较好解读的吧。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;this-is-a-test-blog&quot;&gt;&lt;a href=&quot;#this-is-a-test-blog&quot; class=&quot;headerlink&quot; title=&quot;this is a test blog.&quot;&gt;&lt;/a&gt;this is a test blog.&lt;/h1&gt;&lt;p&gt;
      
    
    </summary>
    
    
      <category term="test" scheme="http://yoursite.com/tags/test/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="http://yoursite.com/2018/02/27/hello-world/"/>
    <id>http://yoursite.com/2018/02/27/hello-world/</id>
    <published>2018-02-27T06:23:46.596Z</published>
    <updated>2018-02-27T06:23:46.596Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.
      
    
    </summary>
    
    
  </entry>
  
</feed>
